namespace Score247.IntegrationTests.Odds
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using JsonNet.ContractResolvers;
    using Microsoft.AspNetCore.SignalR.Client;
    using Newtonsoft.Json;
    using Refit;
    using Score247.IntegrationsTests;
    using Score247.IntegrationsTests.Odds;
    using Soccer.Core.Odds.Models;
    using Soccer.Core.Shared.Enumerations;
    using Soccer.DataProviders.SportRadar.Odds.Dtos;
    using Soccer.EventPublishers.Odds.SignalR;
    using Xunit;

    [Trait("IntegrationTests", "OneXTwo Odds")]
    public class OneXTwoOddsIntegrationTests
    {
        private const int OneXTwoBetTypeId = 1;
        private const int HandicapBetTypeId = 3;
        private const int OverUnderBetTypeId = 2;
        private const string DecimalOdds = "dec";
        private readonly HubConnection connection;
        private readonly ISimulationAdminApi simulationAdminApi;
        private readonly IOddsSimulatorApi oddsSimulatorApi;
        private readonly HangfireTrigger hangfireTrigger;
        private readonly ISoccerOddsApi soccerOddsApi;
        private readonly ISoccerMatchApi soccerMatchApi;
        private readonly IList<OddsComparisonSignalRMessage> oddsComparisonSignalRMessages = new List<OddsComparisonSignalRMessage>();
        private readonly IList<OddsMovementSignalRMessage> oddsMovementSignalRMessages = new List<OddsMovementSignalRMessage>();

        public OneXTwoOddsIntegrationTests()
        {
            var messagePackRefitSettings = new RefitSettings
            {
                ContentSerializer = new MessagePackContentSerializer()
            };
            simulationAdminApi = RestService.For<ISimulationAdminApi>("http://ha.nexdev.net:7208/dev/");
            //simulationAdminApi = RestService.For<ISimulationAdminApi>("http://localhost:64408/");
            oddsSimulatorApi = RestService.For<IOddsSimulatorApi>("http://ha.nexdev.net:7206/V0/");
            soccerOddsApi = RestService.For<ISoccerOddsApi>("https://score247-api1.nexdev.net/dev/api/", messagePackRefitSettings);
            soccerMatchApi = RestService.For<ISoccerMatchApi>("https://score247-api1.nexdev.net/dev/api/", messagePackRefitSettings);
            hangfireTrigger = new HangfireTrigger("http://ha.nexdev.net:7873/hangfire/recurring/trigger");
            connection = new HubConnectionBuilder()
                            .WithUrl("https://score247-api2.nexdev.net/dev/hubs/soccerhub")
                            .Build();

            ListenPushEvent();
        }

        //[Fact]
        public async Task LiveMatch_VerifyOneXTwoOdds()
        {
            var kickOffTime = CreateCurrentDate(10, 10);
            var match = await simulationAdminApi.AutoGenerateMatch(kickOffTime);
            var bookmakerId = "bookmarkerID";
            var bookmakerName = "bookmarkerName";
            
            await LiveMatch_ArrangePreMatchOdds(match, bookmakerId, bookmakerName, kickOffTime);
            await LiveMatch_ArrangeLiveEventOdds(match, bookmakerId, bookmakerName, kickOffTime);

        }

        private async Task LiveMatch_AssertQueryApiAndHubs()
        {

        }

        private async Task LiveMatch_ArrangeLiveEventOdds(AutoGeneratedMatch match, string bookmakerId, string bookmakerName, DateTime kickOffTime)
        {

            await LiveMatch_VerifyKOOdds(match, kickOffTime, bookmakerId);
            // Assert API



            // Assert Hub Events
            //var liveMatchEvents = new List<MatchEvent>
            //{
            //    MatchEvent.CreateMatchStartedEvent(match.MatchId, kickOffTime),
            //    MatchEvent.CreateFirstPeriodStartedEvent(match.MatchId, kickOffTime),
            //    MatchEvent.CreateHalfTimeBreakEvent(match.MatchId, kickOffTime),
            //    MatchEvent.CreateSecondPeriodStartedEvent(match.MatchId, kickOffTime)
            //};

            //for (int i = 0; i < 4; i++)
            //{
            //    var matchEvent = liveMatchEvents.ElementAt(i);
            //    await simulationAdminApi.AutoGenerateEvent(matchEvent.MatchId, matchEvent.EventName, matchEvent.Time);

            //    // Assert API

            //    // Assert Hub Events

            //    if (i == 1)
            //    {
            //        await VerifyOddsChangeInFirstHalfWithoutEventChange(match, bookmakerId, bookmakerName, kickOffTime);
            //    }

            //    if (i == 3)
            //    {
            //        await VerifyOddsChangeInSecondHalfWithoutEventChange(match, bookmakerId, bookmakerName, kickOffTime);
            //    }
            //}

            // Assert API
        }

        private async Task LiveMatch_VerifyOddsChangeInFirstHalf(AutoGeneratedMatch match, DateTime kickOffTime, string bookmakerId)
        {

        }

        private async Task LiveMatch_VerifyKOOdds(AutoGeneratedMatch match, DateTime kickOffTime, string bookmakerId)
        {
            var startedEvent = MatchEvent.CreateMatchStartedEvent(match.MatchId, kickOffTime);
            await simulationAdminApi.AutoGenerateEvent(startedEvent.MatchId, startedEvent.EventName, startedEvent.Time);

            var firstPeriodStartEvent = MatchEvent.CreateFirstPeriodStartedEvent(match.MatchId, kickOffTime);
            await simulationAdminApi.AutoGenerateEvent(firstPeriodStartEvent.MatchId, firstPeriodStartEvent.EventName, firstPeriodStartEvent.Time);

            // Assert API
            var oddsComparison = await soccerOddsApi.GetOdds(Language.en_US.DisplayName, match.MatchId, OneXTwoBetTypeId, DecimalOdds);
            LiveMatch_AssertKOEventOddsComparison(match, bookmakerId, oddsComparison);

            var oddsMovement = await soccerOddsApi.GetOddsMovement(Language.en_US.DisplayName, match.MatchId, OneXTwoBetTypeId, DecimalOdds, bookmakerId);
            LiveMatch_AssertKOEventOddsMovement(match, bookmakerId, oddsMovement);

            // Assert Hub
            var oddsComparisonEvent = oddsComparisonSignalRMessages.LastOrDefault(e => e.MatchId == match.MatchId);
            LiveMatch_AssertKOEventOddsComparison(match, bookmakerId, new MatchOdds(match.MatchId, oddsComparisonEvent.BetTypeOddsList));
            oddsComparisonSignalRMessages.Clear();

            var oddsMovementEvent = oddsMovementSignalRMessages.LastOrDefault(e => e.MatchId == match.MatchId);
            LiveMatch_AssertKOEventOddsMovement(
                match, 
                bookmakerId, 
                new MatchOddsMovement(match.MatchId, oddsMovement.Bookmaker, oddsMovementEvent.OddsEvents.Select(oe => oe.OddsMovement)));
            oddsMovementSignalRMessages.Clear();
        }

        private static void LiveMatch_AssertKOEventOddsMovement(
            AutoGeneratedMatch match, 
            string bookmakerId, 
            MatchOddsMovement oddsMovement)
        {
            Assert.Equal(match.MatchId, oddsMovement.MatchId);
            Assert.Equal(bookmakerId, oddsMovement.Bookmaker.Id);
            var koOdds = oddsMovement.OddsMovements.FirstOrDefault();
            Assert.Equal("KO", koOdds.MatchTime);
            Assert.True(koOdds.IsMatchStarted);

            LiveMatch_AssertKOOddsBetOptions(koOdds.BetOptions);
        }

        private static void LiveMatch_AssertKOEventOddsComparison(AutoGeneratedMatch match, string bookmakerId, MatchOdds oddsComparison)
        {
            Assert.Equal(match.MatchId, oddsComparison.MatchId);
            Assert.Single(oddsComparison.BetTypeOddsList);
            var oneXTwoOdds = oddsComparison.BetTypeOddsList.FirstOrDefault();

            Assert.Equal(OneXTwoBetTypeId, oneXTwoOdds.Id);
            Assert.Equal(bookmakerId, oneXTwoOdds.Bookmaker.Id);

            LiveMatch_AssertKOOddsBetOptions(oneXTwoOdds.BetOptions);

            // Assert Opening Odds
            Assert.Equal(1.1m, oneXTwoOdds.BetOptions.ElementAt(0).OpeningOdds);
            Assert.Equal(2.2m, oneXTwoOdds.BetOptions.ElementAt(1).OpeningOdds);
            Assert.Equal(3.3m, oneXTwoOdds.BetOptions.ElementAt(2).OpeningOdds);
        }

        private static void LiveMatch_AssertKOOddsBetOptions(IEnumerable<BetOptionOdds> betOptions)
        {
            //"1.2", "2.1", "3.3"
            Assert.Equal(2.1m, betOptions.ElementAt(0).LiveOdds);
            Assert.Equal(OddsTrend.Up, betOptions.ElementAt(0).OddsTrend);
            Assert.Equal(1.2m, betOptions.ElementAt(1).LiveOdds);
            Assert.Equal(OddsTrend.Down, betOptions.ElementAt(1).OddsTrend);
            Assert.Equal(3.1m, betOptions.ElementAt(2).LiveOdds);
            Assert.Equal(OddsTrend.Down, betOptions.ElementAt(2).OddsTrend);
        }

        private async Task VerifyOddsChangeInSecondHalfWithoutEventChange(AutoGeneratedMatch match, string bookmakerId, string bookmakerName, DateTime kickOffTime)
        {
            var liveMatchOddsChanges2 = CreateOddsSchedule(
                                match,
                                new List<SportEvent>
                                {
                        OddsTestDataProvider.Create1x2SportEvent(match.MatchId, kickOffTime.AddMinutes(55),
                            new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "1.1", "3.1", "1.3") })
                                });

            await oddsSimulatorApi.OddsChange(liveMatchOddsChanges2);
            await hangfireTrigger.TriggerFetchOdds();
            await Task.Delay(20 * 1000);

            // Assert Hub Events
        }

        private async Task VerifyOddsChangeInFirstHalfWithoutEventChange(AutoGeneratedMatch match, string bookmakerId, string bookmakerName, DateTime kickOffTime)
        {
            var liveMatchOddsChanges1 = CreateOddsSchedule(
                                   match,
                                   new List<SportEvent>
                                   {
                            OddsTestDataProvider.Create1x2SportEvent(match.MatchId, kickOffTime.AddMinutes(13),
                                new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "2.2", "2.6", "3.7") })
                                   });

            await oddsSimulatorApi.OddsChange(liveMatchOddsChanges1);
            await hangfireTrigger.TriggerFetchOdds();
            await Task.Delay(20 * 1000);
        }

        private async Task LiveMatch_ArrangePreMatchOdds(AutoGeneratedMatch match, string bookmakerId, string bookmakerName, DateTime kickOffTime)
        {
            var preMatchOddsSchedule = CreateOddsSchedule(match, new List<SportEvent>
            {
                OddsTestDataProvider.Create1x2SportEvent(match.MatchId, DateTime.Now.AddDays(-1),
                    new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "1.1", "2.2", "3.3") }),
                OddsTestDataProvider.Create1x2SportEvent(match.MatchId, DateTime.Now.AddDays(-1).AddHours(1),
                    new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "1.2", "2.1", "3.3") })
            });

            var liveMatchEventOddsSchedule = CreateOddsSchedule(
                match,
                new List<SportEvent>
                {
                    OddsTestDataProvider.Create1x2SportEvent(match.MatchId, kickOffTime,
                        new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "2.1", "1.2", "3.1") }),
                    OddsTestDataProvider.Create1x2SportEvent(match.MatchId, kickOffTime.AddMinutes(45),
                        new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "1.6", "1.1", "1.3") }),
                    OddsTestDataProvider.Create1x2SportEvent(match.MatchId, kickOffTime.AddMinutes(46),
                        new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "2.2", "3.1", "2.3") })
                });

            await oddsSimulatorApi.OddsChange(preMatchOddsSchedule);
            await oddsSimulatorApi.MatchOdds(liveMatchEventOddsSchedule);
            await hangfireTrigger.TriggerFetchOdds();
            await Task.Delay(20 * 1000);
        }

        //[Fact]
        public async Task PreMatch_VerifyOneXTwoLiveOdds()
        {
            var match = await simulationAdminApi.AutoGenerateMatch(DateTimeOffset.Now);
            var bookmakerId = "bookmarkerID";
            var bookmakerName = "bookmarkerName";
            var oddsSchedule = CreateOddsSchedule(match, new List<SportEvent>
            {
                OddsTestDataProvider.Create1x2SportEvent(match.MatchId, DateTime.Now.AddDays(-1),
                    new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "1.1", "2.2", "3.3") }),
                OddsTestDataProvider.Create1x2SportEvent(match.MatchId, DateTime.Now.AddDays(-1).AddHours(1),
                    new List<Book> { OddsTestDataProvider.CreateOneXTwoBook(bookmakerId, bookmakerName, "1.2", "2.1", "3.3") })
            });
            await oddsSimulatorApi.OddsChange(oddsSchedule);
            await hangfireTrigger.TriggerFetchOdds();

            // Wait for job run to get odds data
            await Task.Delay(20 * 1000);

            // Assert API
            var oddsComparison = await soccerOddsApi.GetOdds(Language.en_US.DisplayName, match.MatchId, OneXTwoBetTypeId, DecimalOdds);
            PreMatch_AssertLiveOddsComparison(match, oddsComparison);

            var oddsMovement = await soccerOddsApi.GetOddsMovement(Language.en_US.DisplayName, match.MatchId, OneXTwoBetTypeId, DecimalOdds, bookmakerId);
            PreMatch_AssertLiveOddsMovement(match, oddsMovement);

            // Assert Hub
            var oddsComparisonEvent = oddsComparisonSignalRMessages.Where(e => e.MatchId == match.MatchId).ElementAt(1);
            PreMatch_AssertLiveOddsComparison(match, new MatchOdds(oddsComparisonEvent.MatchId, oddsComparisonEvent.BetTypeOddsList));
            oddsComparisonSignalRMessages.Clear();

            var oddsMovementEvent = oddsMovementSignalRMessages.Where(e => e.MatchId == match.MatchId).ElementAt(1);
            PreMatch_AssertLiveOddsMovement(match, new MatchOddsMovement(oddsMovementEvent.MatchId, oddsMovement.Bookmaker, oddsMovement.OddsMovements));
            oddsMovementSignalRMessages.Clear();
        }

        private DateTime CreateCurrentDate(int hours, int minutes)
            => DateTime.Now.Date.AddHours(hours).AddMinutes(minutes);

        private void PreMatch_AssertLiveOddsMovement(AutoGeneratedMatch match, MatchOddsMovement oddsMovement)
        {
            Assert.Equal(match.MatchId, oddsMovement.MatchId);
            Assert.Equal("bookmarkerID", oddsMovement.Bookmaker.Id);
            Assert.Equal("bookmarkerName", oddsMovement.Bookmaker.Name);
            var liveOdds = oddsMovement.OddsMovements.FirstOrDefault();
            Assert.Equal("Live", liveOdds.MatchTime);
            Assert.False(liveOdds.IsMatchStarted);

            AssertLiveOddsBetOptions(liveOdds.BetOptions);
        }

        private static void AssertLiveOddsBetOptions(IEnumerable<BetOptionOdds> betOptions)
        {
            Assert.Equal(1.2m, betOptions.ElementAt(0).LiveOdds);
            Assert.Equal(OddsTrend.Up, betOptions.ElementAt(0).OddsTrend);
            Assert.Equal(2.1m, betOptions.ElementAt(1).LiveOdds);
            Assert.Equal(OddsTrend.Down, betOptions.ElementAt(1).OddsTrend);
            Assert.Equal(3.3m, betOptions.ElementAt(2).LiveOdds);
            Assert.Equal(OddsTrend.Neutral, betOptions.ElementAt(2).OddsTrend);
        }

        private void PreMatch_AssertLiveOddsComparison(AutoGeneratedMatch match, MatchOdds oddsComparison)
        {
            Assert.Equal(match.MatchId, oddsComparison.MatchId);
            Assert.Single(oddsComparison.BetTypeOddsList);
            var oneXTwoOdds = oddsComparison.BetTypeOddsList.FirstOrDefault();
            Assert.Equal(OneXTwoBetTypeId, oneXTwoOdds.Id);
            Assert.Equal("bookmarkerID", oneXTwoOdds.Bookmaker.Id);
            Assert.Equal("bookmarkerName", oneXTwoOdds.Bookmaker.Name);

            AssertLiveOddsBetOptions(oneXTwoOdds.BetOptions);

            // Assert Opening Odds
            Assert.Equal(1.1m, oneXTwoOdds.BetOptions.ElementAt(0).OpeningOdds);
            Assert.Equal(2.2m, oneXTwoOdds.BetOptions.ElementAt(1).OpeningOdds);
            Assert.Equal(3.3m, oneXTwoOdds.BetOptions.ElementAt(2).OpeningOdds);
        }

        //[Fact]
        public async Task PreMatch_VerifyOneXTwoOpeningOdds()
        {
            var match = await simulationAdminApi.AutoGenerateMatch(DateTimeOffset.Now);
            var oddsSchedule = CreateOddsSchedule(match);

            // Push odds change to simulator and trigger get odds
            await oddsSimulatorApi.OddsChange(oddsSchedule);
            await hangfireTrigger.TriggerFetchOdds();

            // Wait for job run to get odds data
            await Task.Delay(20 * 1000);

            // Assert API
            var oddsComparison = await soccerOddsApi.GetOdds(Language.en_US.DisplayName, match.MatchId, OneXTwoBetTypeId, DecimalOdds);
            PreMatch_AssertOpeningOddsComparison(match, oddsComparison);

            var oddsMovement = await soccerOddsApi.GetOddsMovement(Language.en_US.DisplayName, match.MatchId, OneXTwoBetTypeId, DecimalOdds, "sr:book:1");
            PreMatch_AssertOpeningOddsMovement(match, oddsMovement);

            // Assert Hub
            var oddsComparisonEvent = oddsComparisonSignalRMessages.FirstOrDefault();
            PreMatch_AssertOpeningOddsComparison(match, new MatchOdds(oddsComparisonEvent.MatchId, oddsComparisonEvent.BetTypeOddsList));
            oddsComparisonSignalRMessages.Clear();

            var oddsMovementEvent = oddsMovementSignalRMessages.FirstOrDefault();
            PreMatch_AssertOpeningOddsMovement(match, new MatchOddsMovement(oddsMovementEvent.MatchId, oddsMovement.Bookmaker, oddsMovement.OddsMovements));
            oddsMovementSignalRMessages.Clear();
        }

        private static OddsScheduleDto CreateOddsSchedule(AutoGeneratedMatch match, List<SportEvent> sportEvents = null)
            => new OddsScheduleDto
            {
                sport_events = sportEvents ?? new List<SportEvent> { OddsTestDataProvider.Create1x2SportEvent(match.MatchId, DateTime.Now.AddDays(-1)) }
            };

        private void PreMatch_AssertOpeningOddsMovement(AutoGeneratedMatch match, MatchOddsMovement oddsMovement)
        {
            Assert.Equal(match.MatchId, oddsMovement.MatchId);
            Assert.Equal("sr:book:1", oddsMovement.Bookmaker.Id);
            Assert.Equal("Unibet 1", oddsMovement.Bookmaker.Name);
            var openingOdds = oddsMovement.OddsMovements.FirstOrDefault();
            Assert.Equal("Opening", openingOdds.MatchTime);
            Assert.False(openingOdds.IsMatchStarted);
            Assert.Equal(4.75m, openingOdds.BetOptions.ElementAt(0).LiveOdds);
            Assert.Equal(1.75m, openingOdds.BetOptions.ElementAt(1).LiveOdds);
            Assert.Equal(2.75m, openingOdds.BetOptions.ElementAt(2).LiveOdds);
        }

        private void PreMatch_AssertOpeningOddsComparison(AutoGeneratedMatch match, MatchOdds oddsComparison)
        {
            Assert.Equal(match.MatchId, oddsComparison.MatchId);
            Assert.Equal(3, oddsComparison.BetTypeOddsList.Count());
            var oneXTwoOdds = oddsComparison.BetTypeOddsList.FirstOrDefault();
            Assert.Equal(OneXTwoBetTypeId, oneXTwoOdds.Id);
            Assert.Equal("sr:book:1", oneXTwoOdds.Bookmaker.Id);
            Assert.Equal("Unibet 1", oneXTwoOdds.Bookmaker.Name);
            Assert.Equal(4.75m, oneXTwoOdds.BetOptions.ElementAt(0).LiveOdds);
            Assert.Equal(1.75m, oneXTwoOdds.BetOptions.ElementAt(1).LiveOdds);
            Assert.Equal(2.75m, oneXTwoOdds.BetOptions.ElementAt(2).LiveOdds);
        }

        private void ListenPushEvent()
        {
            var settings = new JsonSerializerSettings
            {
                ContractResolver = new PrivateSetterContractResolver()
            };

            connection.Closed += async (error) =>
            {
                await Task.Delay(new Random().Next(0, 5) * 1000);
                await connection.StartAsync();
            };

            connection.On<string>("OddsMovement", (data) =>
            {
                oddsMovementSignalRMessages.Add(JsonConvert.DeserializeObject<OddsMovementSignalRMessage>(data, settings));
            });

            connection.On<string>("OddsComparison", (data) =>
            {
                oddsComparisonSignalRMessages.Add(JsonConvert.DeserializeObject<OddsComparisonSignalRMessage>(data, settings));
            });

            connection.StartAsync().GetAwaiter().GetResult();
        }
    }
}