namespace Score247.IntegrationTests
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using MessagePack;
    using Refit;
    using Soccer.API.Matches.Models;
    using Soccer.Core.Odds.Models;
    using Soccer.DataProviders.SportRadar.Odds.Dtos;

    public interface ISimulationAdminApi
    {
        [Post("/Match/AutoCreateMatch/{createDate}")]
        Task<AutoGeneratedMatch> AutoGenerateMatch(DateTimeOffset createDate);

        [Post("/Match/AutoCreateMatch/{matchId}/{eventName}/{time}")]
        Task<object> AutoGenerateEvent(string matchId, string eventName, DateTimeOffset time);
    }

    public class AutoGeneratedMatch
    {
        public string MatchId { get; set; }
    }

    public interface IOddsSimulatorApi
    {
        [Post("/OddsChange")]
        Task<OddsChangeResponse> OddsChange([Body]OddsScheduleDto oddsScheduleDto);

        [Post("/MatchOdds")]
        Task<object> MatchOdds([Body]OddsScheduleDto oddsScheduleDto);
    }

    public class OddsChangeResponse
    {
        public string Message { get; set; }

        public string Data { get; set; }
    }

    public class MatchEvent
    {
        public static MatchEvent CreateMatchStartedEvent(string matchId, DateTimeOffset time)
            => new MatchEvent { MatchId = matchId, EventName = "match_started", Time = time };

        public static MatchEvent CreateFirstPeriodStartedEvent(string matchId, DateTimeOffset time)
            => new MatchEvent { MatchId = matchId, EventName = "1st_period_start", Time = time };

        public static MatchEvent CreateHalfTimeBreakEvent(string matchId, DateTimeOffset time)
            => new MatchEvent { MatchId = matchId, EventName = "break_start", Time = time };

        public static MatchEvent CreateSecondPeriodStartedEvent(string matchId, DateTimeOffset time)
            => new MatchEvent { MatchId = matchId, EventName = "2nd_period_start", Time = time };

        public string MatchId { get; set; }

        public string EventName { get; set; }

        public DateTimeOffset Time { get; set; }
    }

    public interface ISoccerMatchApi
    {
        [Get("/soccer/{language}/matches?fd={fromDate}&td={toDate}")]
        Task<IEnumerable<MatchSummary>> GetMatches(string fromDate, string toDate, string language);

        [Get("/soccer/{language}/matches/{matchId}")]
        Task<MatchInfo> GetMatchInfo(string matchId, string language);
    }

    public interface ISoccerOddsApi
    {
        [Get("/soccer/{lang}/odds/{matchId}/{betTypeId}/{formatType}")]
        Task<MatchOdds> GetOdds(string lang, string matchId, int betTypeId, string formatType);

        [Get("/soccer/{lang}/odds-movement/{matchId}/{betTypeId}/{formatType}/{bookmakerId}")]
        Task<MatchOddsMovement> GetOddsMovement(string lang, string matchId, int betTypeId, string formatType, string bookmakerId);
    }

    public class MessagePackContentSerializer : IContentSerializer
    {
        public async Task<T> DeserializeAsync<T>(HttpContent content)
        {
            var data = MessagePackSerializer.Deserialize<T>(await content.ReadAsStreamAsync());

            return data;
        }

        public Task<HttpContent> SerializeAsync<T>(T item)
        {
            var content = new ByteArrayContent(MessagePackSerializer.Serialize(item));
            return Task.FromResult((HttpContent)content);
        }
    }
}